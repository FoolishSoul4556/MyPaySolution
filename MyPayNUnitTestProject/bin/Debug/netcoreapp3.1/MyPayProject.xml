<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyPayProject</name>
    </assembly>
    <members>
        <member name="T:MyPayProject.CsvImporter">
            <summary>
            A class created to import the .csv file in
            </summary>
        </member>
        <member name="M:MyPayProject.CsvImporter.ImportPayRecords(System.String)">
            <summary>
            To process the importing of the .csv file
            </summary>
            <remarks>the use of the library CsvHelper has made this process much more faster</remarks>
            <param name="file">The string file is linked with the main program to access the file</param>
            <returns>The payroll gather the information from it headers (row) and data(column) into a List that is accessible through the PayRecord class.</returns>
        </member>
        <member name="M:MyPayProject.CsvImporter.CreatePayRecord(System.Int32,System.Double[],System.Double[],System.String,System.String)">
            <summary>
            Receives information from the ImportPayRecord and split the data
            </summary>
            <remarks>The data is send to the child classes of PayRecord, as the ResidentPayRecord and WorkingHolidayPayRecord methods have different data require in there parameter</remarks>
            <param name="id">The EmployeeID, important in gathering the correct hours, rates, visa and yearToDate.</param>
            <param name="hours">A array (list) of all the hours</param>
            <param name="rates">A array (list) of all the rates</param>
            <param name="visa">A string to be used identify who's not a resdient</param>
            <param name="yearToDate">Another data like the visa to identify who is not a resident</param>
            <returns>The 'if' and 'else' statements helps in returning the information to the right classes, as the visa and yearToDate only applies to the WorkingHolidayPayRecord.</returns>
        </member>
        <member name="T:MyPayProject.PayRecord">
            <summary>
            An abstract class, can't be instantiate however the child class can override its method.
            </summary>
            <remarks>Contains information in order to calculate gross, tax and net</remarks>
        </member>
        <member name="F:MyPayProject.PayRecord._hours">
            <summary>
            used to collect the hours and rate given in the parameter to be used in the class.
            </summary>
        </member>
        <member name="F:MyPayProject.PayRecord._rates">
            <summary>
            used to collect the hours and rate given in the parameter to be used in the class.
            </summary>
        </member>
        <member name="M:MyPayProject.PayRecord.#ctor(System.Int32,System.Double[],System.Double[])">
            <summary>
            used to retrieve the information above and to be applied to data inside the method.
            </summary>
            <param name="id">Employee ID</param>
            <param name="hours">An array of hours</param>
            <param name="rates">An array of rates</param>
        </member>
        <member name="P:MyPayProject.PayRecord.Id">
            <summary>
            Receives the information regarding the employee's ID. Helps in gather all other data in shift to be calculate together
            </summary>
        </member>
        <member name="P:MyPayProject.PayRecord.Gross">
            <summary>
            Through the use of Id being the same in certain rows, the gross can be calculate by using array of hours and rates that has the same Id.
            </summary>
        </member>
        <member name="P:MyPayProject.PayRecord.Tax">
            <summary>
            Having this method helps the child classes to override and pass in the correct information to separate how tax is calculated based on type of employee.
            </summary>
        </member>
        <member name="P:MyPayProject.PayRecord.Net">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyPayProject.PayRecord.GetDetails">
            <summary>
            This method is also overriden by the child classes with appropriate data based on the different of employee PayRecord classes.
            </summary>
            <returns>a empty string which can be overriden in the child classes</returns>
        </member>
        <member name="T:MyPayProject.PayRecordWriter">
            <summary>
            The class solely used to towards the end of program's process where the all data gets collected to be send to Program class to display and  write .csv file with the new data (id, gross, tax, net and ytd).
            </summary>
        </member>
        <member name="M:MyPayProject.PayRecordWriter.Write(System.String,System.Collections.Generic.List{MyPayProject.PayRecord},System.Boolean)">
            <summary>
            a method solely used to write the data into the console as well as .csv file
            </summary>
            <param name="file">referring to .csv file</param>
            <param name="records">all data as mentioned before are recorded here</param>
            <param name="writeToConsole">if the condition are met then bool will equal true executing the details into console.</param>
        </member>
        <member name="T:MyPayProject.Program">
            <summary>
            The first (main) class that get execute when the code is compiled.
            </summary>
        </member>
        <member name="M:MyPayProject.Program.Main(System.String[])">
            <summary>
            Executes the input file path in beginning and exportation process at end
            </summary>
            <param name="args"></param>
            <returns>and returns either the GetInputFolderPath method (for reading the file when program starts) and GetExportFolderPath method (for writing the file before the program ends)</returns>
        </member>
        <member name="T:MyPayProject.ResidentPayRecord">
            <summary>
            A class created for different employee based on their data received through the .csv file
            </summary>
            <remarks>Inherits the information needed to override the parent class' methods.</remarks>
        </member>
        <member name="M:MyPayProject.ResidentPayRecord.#ctor(System.Int32,System.Double[],System.Double[])">
            <summary>
            Helps in retrieving data from csvimporter class
            </summary>
            <param name="id">Emplouyee Id</param>
            <param name="hours">An array of hours</param>
            <param name="rates">An array of rates</param>
        </member>
        <member name="P:MyPayProject.ResidentPayRecord.Tax">
            <summary>
            used to override the Tax getter method in the PayRecord class
            </summary>
            <remarks>Sends the information needed to the TaxCalculator, also pass the data type inside the parameters</remarks>
        </member>
        <member name="M:MyPayProject.ResidentPayRecord.GetDetails">
            <summary>
            Override the method in PayRecord to send the Resident details to whichever class calls for the method.
            </summary>
            <returns>An string with data type need shown in the console</returns>
        </member>
        <member name="T:MyPayProject.Import.TaxCalculator">
            <summary>
            Created solely to calculate the tax, however there are two methods to calculate based of the different employee's data processed through.
            </summary>
        </member>
        <member name="M:MyPayProject.Import.TaxCalculator.CalculateResidentialTax(System.Double)">
            <summary>
            Only the ResidentPayRecord data can go through this method has it meets the data needed to be proceed
            </summary>
            <param name="gross">This data is receieved through the ResidentPayRecord class, a total of hours multiplied by rates by the amount shifts the employee has done</param>
            <returns>different values are returned based on what the gross is</returns>
        </member>
        <member name="M:MyPayProject.Import.TaxCalculator.CalculateWorkingHolidayTax(System.Double,System.Double)">
            <summary>
            Only the WorkingHolidayPayRecord data can go through this method has it meets the data needed to be proceed
            </summary>
            <param name="gross">This data is receieved through the WorkingHolidayClass class, a total of hours multiplied by rates by the amount shifts the employee has done</param>
            <param name="yearToDate">The data is only used to identify that only Working Holiday employee's information can only go through</param>
            <returns>different values are returned based on what the gross is</returns>
        </member>
        <member name="T:MyPayProject.WorkingHolidayPayRecord">
            <summary>
            A class created for different employee based on their data received through the .csv file
            </summary>
            <remarks>Inherits the information needed to override the parent class' methods.</remarks>
        </member>
        <member name="P:MyPayProject.WorkingHolidayPayRecord.Tax">
            <summary>
            used to override the Tax getter method in the PayRecord class
            </summary>
            <remarks>Sends the information needed to the TaxCalculator, also pass the data type inside the parameters</remarks>
        </member>
        <member name="P:MyPayProject.WorkingHolidayPayRecord.visa">
            <summary>
            Gets information needed from the WorkingHolidayPayRecord method, which this information later sends to the GetDetails method.
            </summary>
        </member>
        <member name="F:MyPayProject.WorkingHolidayPayRecord.ytd">
            <summary>
            An variable created to collect the value needed to do mathematic calculation to the YearToDate getter and setter
            </summary>
        </member>
        <member name="P:MyPayProject.WorkingHolidayPayRecord.YearToDate">
            <summary>
            Gets the information from the WorkingHolidayPayRecord method as well but getter returns ytd and setter is used set ytd as it's value
            </summary>
            <remarks>ytd equals the initial YearToDate amount added by the double convert to int gross data</remarks>
        </member>
        <member name="M:MyPayProject.WorkingHolidayPayRecord.GetDetails">
            <summary>
            Override the method in PayRecord to send the Working Holiday person's details to whichever class calls for the method.
            </summary>
            <returns>An string with data type need shown in the console</returns>
            <remarks>The ':C' is used to display the values as currency</remarks>
        </member>
    </members>
</doc>
